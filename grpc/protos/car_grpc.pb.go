// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.1
// source: grpc/protos/car.proto

package carserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarManagerClient is the client API for CarManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarManagerClient interface {
	GetCarById(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Car, error)
}

type carManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCarManagerClient(cc grpc.ClientConnInterface) CarManagerClient {
	return &carManagerClient{cc}
}

func (c *carManagerClient) GetCarById(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/car.CarManager/GetCarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarManagerServer is the server API for CarManager service.
// All implementations must embed UnimplementedCarManagerServer
// for forward compatibility
type CarManagerServer interface {
	GetCarById(context.Context, *wrapperspb.Int32Value) (*Car, error)
	mustEmbedUnimplementedCarManagerServer()
}

// UnimplementedCarManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCarManagerServer struct {
}

func (UnimplementedCarManagerServer) GetCarById(context.Context, *wrapperspb.Int32Value) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarById not implemented")
}
func (UnimplementedCarManagerServer) mustEmbedUnimplementedCarManagerServer() {}

// UnsafeCarManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarManagerServer will
// result in compilation errors.
type UnsafeCarManagerServer interface {
	mustEmbedUnimplementedCarManagerServer()
}

func RegisterCarManagerServer(s grpc.ServiceRegistrar, srv CarManagerServer) {
	s.RegisterService(&CarManager_ServiceDesc, srv)
}

func _CarManager_GetCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarManagerServer).GetCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarManager/GetCarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarManagerServer).GetCarById(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

// CarManager_ServiceDesc is the grpc.ServiceDesc for CarManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car.CarManager",
	HandlerType: (*CarManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarById",
			Handler:    _CarManager_GetCarById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/protos/car.proto",
}
